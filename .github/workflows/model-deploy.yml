name: Model Deployment Automation

on:
  push:
    branches: [ main ]
    paths:
      - "models/**"   # Trigger only when something inside models/ changes
  workflow_dispatch:   # Allow manual triggering for testing

jobs:
  deploy-model:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Ensure full git history

    - name: Detect new or updated models
      id: detect
      run: |
        # Ensure main branch exists locally
        git fetch origin main

        # List existing model folders in main branch
        existing_models=$(git ls-tree -d origin/main models | awk '{print $4}')

        # Get changed files under models/ in the last commit
        changed_files=$(git diff --name-status origin/main...HEAD -- models/ || true)

        new_models=""
        updated_models=""

        # Process each changed file
        while IFS= read -r line; do
          status=$(echo "$line" | cut -f1)
          file_path=$(echo "$line"   | cut -f2)
          model=$(echo "$file_path" | cut -d'/' -f2)  # Extract model folder name

          # Skip empty
          [ -z "$model" ] && continue

          # Decide if new or updated
          if [[ ! " $existing_models " =~ " $model " ]]; then
            new_models="$new_models $model"
          else
            updated_models="$updated_models $model"
          fi
        done <<< "$changed_files"

        # Deduplicate
        new_models=$(echo $new_models | tr ' ' '\n' | sort -u | tr '\n' ' ')
        updated_models=$(echo $updated_models | tr ' ' '\n' | sort -u | tr '\n' ' ')

        echo "new_models=$new_models" >> $GITHUB_OUTPUT
        echo "updated_models=$updated_models" >> $GITHUB_OUTPUT

        echo "Detected new models: $new_models"
        echo "Detected updated models: $updated_models"

    - name: Register new models
      if: steps.detect.outputs.new_models != ''
      run: |
        for model in ${{ steps.detect.outputs.new_models }}; do
          echo "Registering model: $model"
          response=$(curl -s -X POST "https://48399197-d109-447f-a562-0efddbd1a346.mock.pstmn.io/register" \
            -H "Content-Type: application/json" \
            -d "{\"model_name\": \"$model\"}")
          echo "Response: $response"
          echo ""
        done

    - name: Update existing models
      if: steps.detect.outputs.updated_models != ''
      run: |
        for model in ${{ steps.detect.outputs.updated_models }}; do
          echo "Updating model: $model"
          response=$(curl -s -X POST "https://48399197-d109-447f-a562-0efddbd1a346.mock.pstmn.io/update" \
            -H "Content-Type: application/json" \
            -d "{\"model_name\": \"$model\", \"version\": \"v1.1\", \"changes\": \"Updated weights\"}")
          echo "Response: $response"
          echo ""
        done
